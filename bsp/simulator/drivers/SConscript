import sys
import os
from building import *
Import('rtconfig')

cwd = GetCurrentDir()
src = Glob('*.c')
LIBS = []
LIBPATH = []
CPPPATH = [cwd]
CPPDEFINES = []

if rtconfig.CROSS_TOOL == 'msvc':
    CPPDEFINES += \
    [
        # avoid to conflict with the inherent STDC in VS
        '_CRT_DECLARE_NONSTDC_NAMES=0',
        # errno macro redefinition
        '_CRT_ERRNO_DEFINED',
        # avoid time.h conflicts, such as struct timespec, ctime, difftime...
        '_CRT_NO_TIME_T',
        # disable deprecation of unsafe functions, such as strncpy
        '_CRT_SECURE_NO_WARNINGS',
        # RT_VESRION conflicts in winuser.h
        'NORESOURCE',
        # lean and mean for Windows.h, exclude winsock.h when include Windows.h
        # avoid conlicts between sys/select.h, time.h, and winsock.h
        # such as fd_set related, struct timeval...
        'WIN32_LEAN_AND_MEAN'
    ]

# remove no need file.
if GetDepend('PKG_USING_GUIENGINE') == False:
    SrcRemove(src, 'sdl_fb.c')
else:
    LIBS.append('SDL2')
    if sys.platform == 'win32':
        LIBPATH.append(os.path.abspath(os.path.join(cwd, '../SDL2/lib/x86')))
        CPPPATH.append(os.path.abspath(os.path.join(cwd, '../SDL2/include')))

if GetDepend('BSP_USING_RTC') == False:
    SrcRemove(src, 'drv_rtc.c')
if GetDepend('RT_USING_DFS') == False or GetDepend('RT_USING_DFS_ELMFAT') == False:
    SrcRemove(src, 'sd_sim.c')
if GetDepend('RT_USING_DFS') == False or GetDepend('RT_USING_MTD_NAND') == False:
    SrcRemove(src, 'nanddrv_file.c')
if GetDepend('RT_USING_DFS') == False or GetDepend('RT_USING_MTD_NOR') == False:
    SrcRemove(src, 'sst25vfxx_mtd_sim.c')
if GetDepend('RT_USING_DFS') == False or GetDepend('RT_USING_DFS_WINSHAREDIR') == False:
    SrcRemove(src, 'dfs_win32.c')
if GetDepend('RT_USING_DFS') == False or GetDepend('RT_USING_MODULE') == False:
    SrcRemove(src, ['module_win32.c'])
if sys.platform[0:5]=="linux": #check whether under linux
    SrcRemove(src, ['module_win32.c', 'dfs_win32.c'])

group = DefineGroup('Drivers', src, depend = [''],
            CPPPATH = CPPPATH, LIBS=LIBS, LIBPATH=LIBPATH, CPPDEFINES=CPPDEFINES)

list = os.listdir(cwd)
for item in list:
    if os.path.isfile(os.path.join(cwd, item, 'SConscript')):
        group = group + SConscript(os.path.join(item, 'SConscript'))

Return('group')
